import java.lang.reflect.Array

apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "nil.nadph.qnotified"
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 37
        versionName "0.8.4" + (getGitHeadRefsSuffix.call() as String)
        //testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    aaptOptions {
        additionalParameters '--allow-reserved-package-id', '--package-id', '0x75'
    }
}

dependencies {
    compileOnly fileTree(include: ['*.jar'], dir: 'lib')
    testImplementation 'junit:junit:4.12'
}

def _execDexTail = { String dexPath ->
    URLClassLoader cl = new URLClassLoader(new File(rootProject.projectDir, "app" + File.separator + "utils" + File.separator + "tail.jar").toURL());
    byte[] time = cl.loadClass("cc.ioctl.dextail.HexUtils").getMethod("getTimeAsByteArray").invoke(null) as byte[];
    PrintStream stdout = System.out;
    boolean result = cl.loadClass("cc.ioctl.dextail.Main").getMethod("checkAndUpdateTail", String.class, byte[].class, boolean.class, PrintStream.class)
            .invoke(null, dexPath, time, true, stdout);
    return result;
}

task dexTailDebug {
    doLast {
        println("dexTailDebug.doLast invoked");
        ArrayList<File> pathList = new ArrayList<>();
        String tmp_path = "intermediates/dex/debug/out/classes.dex";
        if (!"/".equals(File.separator)) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar);
        }
        File tmp_f = new File(project.buildDir, tmp_path);
        if (tmp_f.exists()) {
            pathList.add(tmp_f);
        }
        tmp_path = "intermediates/dex/debug/mergeDexDebug/classes.dex";
        if (!"/".equals(File.separator)) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar);
        }
        tmp_f = new File(project.buildDir, tmp_path);
        if (tmp_f.exists()) {
            pathList.add(tmp_f);
        }
        if (pathList.size() == 0) {
            throw new RuntimeException("dex not found: we only support 3.6.x, 4.0.x and 4.1.x");
        }
        for (File f : pathList) {
            if (!_execDexTail(f.getAbsolutePath())) {
                throw new RuntimeException("DedxTail returned false");
            }
        }
    }
}

task dexTailRelease {
    doLast {
        println("dexTailRelease.doLast invoked")
        ArrayList<File> pathList = new ArrayList<>();
        String tmp_path = "intermediates/dex/release/out/classes.dex";
        if (!"/".equals(File.separator)) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar);
        }
        File tmp_f = new File(project.buildDir, tmp_path);
        if (tmp_f.exists()) {
            pathList.add(tmp_f);
        }
        tmp_path = "intermediates/dex/release/mergeDexRelease/classes.dex";
        if (!"/".equals(File.separator)) {
            tmp_path = tmp_path.replace('/'.charAt(0), File.separatorChar);
        }
        tmp_f = new File(project.buildDir, tmp_path);
        if (tmp_f.exists()) {
            pathList.add(tmp_f);
        }
        if (pathList.size() == 0) {
            throw new RuntimeException("dex not found: we only support 3.6.x, 4.0.x and 4.1.x");
        }
        for (File f : pathList) {
            if (!_execDexTail(f.getAbsolutePath())) {
                throw new RuntimeException("DedxTail returned false");
            }
        }
    }
}

tasks.whenTaskAdded { t ->
    if (t.name == 'assembleDebug') {
        t.dependsOn dexTailDebug
    }
    if (t.name == 'mergeDexDebug') {
        dexTailDebug.dependsOn t
    }
    if (t.name == 'stripDebugDebugSymbols') {
        dexTailDebug.mustRunAfter(t)
    }
    if (t.name == 'assembleRelease') {
        t.dependsOn dexTailRelease
    }
    if (t.name == 'mergeDexRelease') {
        dexTailRelease.dependsOn t
    }
    if (t.name == 'stripReleaseDebugSymbols') {
        dexTailRelease.mustRunAfter(t)
    }
}
